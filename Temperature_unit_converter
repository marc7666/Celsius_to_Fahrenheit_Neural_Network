{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Temperature_unit_converter","provenance":[],"authorship_tag":"ABX9TyPBC401T2NJdXxxoTLBIeA6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"EVlTg1z0WHS_","executionInfo":{"status":"ok","timestamp":1639996270933,"user_tz":-60,"elapsed":262,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}}},"outputs":[],"source":["import tensorflow as tf\n","import numpy as np"]},{"cell_type":"code","source":["celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float) # Inputs\n","farenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float) # Outputs"],"metadata":{"id":"dcE5T0THZTVd","executionInfo":{"status":"ok","timestamp":1639996381452,"user_tz":-60,"elapsed":253,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["cape = tf.keras.layers.Dense(units=1, input_shape=[1]) # A dense layer is connected to each neuron in the next layer \n","# units = number of neurons in the layer\n","# input_shape = 1 input with 1 neuron\n","model = tf.keras.Sequential([cape])"],"metadata":{"id":"1YIUNCkuZuO_","executionInfo":{"status":"ok","timestamp":1639996593010,"user_tz":-60,"elapsed":252,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["model.compile(\n","    optimizer = tf.keras.optimizers.Adam(0.1), # Allows the layer to adjust biases and weights efficiently for it to learn \n","    # The number tells the optimizer how much to adjust for weights and biases. \n","    loss = 'mean_squared_error' # This function considers that a small number of large errors is worse than a large number of small errors \n","    \n",")"],"metadata":{"id":"1bEt3Un_aqr6","executionInfo":{"status":"ok","timestamp":1639996915888,"user_tz":-60,"elapsed":247,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["print(\"Starting training...\\n\")\n","historyal = model.fit(celsius, farenheit, epochs=1000, verbose=False)\n","# model.fit(inputs, outputs, epochs => 1 lap means reviewing the data only once)\n","print(\"Model trained!\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kv30ysDhbwiQ","executionInfo":{"status":"ok","timestamp":1639997198778,"user_tz":-60,"elapsed":3463,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}},"outputId":"4b38aa58-0832-4160-bedd-b3eca00ff9ac"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting training...\n","\n","Model trained!\n","\n"]}]},{"cell_type":"code","source":["# Result of the loss function.\n","# This function tells us how bad are the results of the network in each epoch\n","import matplotlib.pyplot as plt\n","plt.xlabel(\"# Epoch\")\n","plt.ylabel(\"Loss magnitude\")\n","plt.plot(historyal.history[\"loss\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"JaIG755zc11O","executionInfo":{"status":"ok","timestamp":1639997363141,"user_tz":-60,"elapsed":297,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}},"outputId":"18201c1e-daa4-42e7-ac47-0ddd5dca9f1a"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fac44e16810>]"]},"metadata":{},"execution_count":8},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(\"Let's make a prediction!\")\n","result = model.predict([100.0])\n","print(\"The result of converting 100.0 Celsius degrees in Farenheit is: \" + str(result))\n","# 100 Celsius degrees = 212 Fahrenheit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gN1FHTSxdjBW","executionInfo":{"status":"ok","timestamp":1639997520645,"user_tz":-60,"elapsed":239,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}},"outputId":"cbc5b41a-7627-4182-f323-9be6e53ee6e0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Let's make a prediction!\n","The result of converting 100.0 Celsius degrees in Farenheit is: [[211.74239]]\n"]}]},{"cell_type":"code","source":["print(\"Internal variables of the model \\n\")\n","print(cape.get_weights())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CfbOgi6ZeQ_L","executionInfo":{"status":"ok","timestamp":1639997612351,"user_tz":-60,"elapsed":226,"user":{"displayName":"Marc Cervera rosell","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjYiFH56j_uwzx7mSQQv3dtEXh_3HRgwDKFKg1H=s64","userId":"07040863903175050871"}},"outputId":"b0e2f670-b039-487d-fb41-9f8fb5f5ba33"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Internal variables of the model \n","\n","[array([[1.798255]], dtype=float32), array([31.916885], dtype=float32)]\n"]}]},{"cell_type":"code","source":["\"\"\"\n","Input                   Outout\n","            1.798    \n","100ºC ----------------> 31.9ºF\n","\n","\n","\n","100 * 1.798 = 179.8 + 31.9 = 211.74\n","\"\"\""],"metadata":{"id":"6Ub5h_CJflIw"},"execution_count":null,"outputs":[]}]}